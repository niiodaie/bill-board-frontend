import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Navigation } from '@/components/navigation';
import { 
  Heart, 
  Gift, 
  Calendar, 
  MapPin, 
  DollarSign, 
  Clock, 
  Lightbulb,
  Share2,
  Sparkles,
  Users,
  Star,
  RefreshCw
} from 'lucide-react';
import { useTranslation } from 'react-i18next';

interface SurpriseIdea {
  title: string;
  description: string;
  estimatedCost: string;
  timeRequired: string;
  difficulty: 'easy' | 'medium' | 'hard';
  category: string;
  materials?: string[];
  steps?: string[];
  tips?: string[];
  alternatives?: string[];
}

interface SurpriseResponse {
  ideas: SurpriseIdea[];
  location: string;
  occasion: string;
  shareableText: string;
}

const OCCASIONS = [
  { value: 'birthday', label: 'Birthday', icon: '🎂' },
  { value: 'anniversary', label: 'Anniversary', icon: '💕' },
  { value: 'date_night', label: 'Date Night', icon: '🌹' },
  { value: 'apology', label: 'Apology', icon: '🙏' },
  { value: 'just_because', label: 'Just Because', icon: '✨' },
  { value: 'holiday', label: 'Holiday', icon: '🎄' },
];

const RELATIONSHIPS = [
  { value: 'partner', label: 'Romantic Partner', icon: '💑' },
  { value: 'friend', label: 'Friend', icon: '👫' },
  { value: 'family', label: 'Family Member', icon: '👨‍👩‍👧‍👦' },
  { value: 'colleague', label: 'Colleague', icon: '🤝' },
];

const BUDGETS = [
  { value: 'low', label: 'Budget-Friendly ($0-25)', icon: '💰' },
  { value: 'medium', label: 'Moderate ($25-100)', icon: '💳' },
  { value: 'high', label: 'Premium ($100-500)', icon: '💎' },
  { value: 'unlimited', label: 'Sky\'s the Limit', icon: '🚀' },
];

const PERSONALITY_TYPES = [
  { value: 'adventurous', label: 'Adventurous', icon: '🏔️' },
  { value: 'romantic', label: 'Romantic', icon: '💝' },
  { value: 'practical', label: 'Practical', icon: '🔧' },
  { value: 'creative', label: 'Creative', icon: '🎨' },
  { value: 'social', label: 'Social', icon: '🎉' },
];

export function SurprisesPage() {
  const { t } = useTranslation();
  const [formData, setFormData] = useState({
    occasion: '',
    relationship: '',
    budget: '',
    location: '',
    interests: '',
    personalityType: '',
  });
  const [surprises, setSurprises] = useState<SurpriseResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [quickSurprises, setQuickSurprises] = useState<SurpriseIdea[]>([]);

  // Load quick surprises on page load
  useEffect(() => {
    loadQuickSurprises();
  }, []);

  const loadQuickSurprises = async () => {
    try {
      const response = await fetch('/api/surprises/quick');
      if (response.ok) {
        const data = await response.json();
        setQuickSurprises(data.ideas || []);
      }
    } catch (error) {
      console.error('Failed to load quick surprises:', error);
    }
  };

  const generateSurprises = async () => {
    if (!formData.occasion || !formData.relationship || !formData.budget) {
      return;
    }

    setLoading(true);
    try {
      const requestData = {
        ...formData,
        interests: formData.interests ? formData.interests.split(',').map(i => i.trim()) : [],
      };

      const response = await fetch('/api/surprises/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData),
      });

      if (response.ok) {
        const data = await response.json();
        setSurprises(data);
      }
    } catch (error) {
      console.error('Failed to generate surprises:', error);
    } finally {
      setLoading(false);
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
      case 'hard': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';
    }
  };

  const shareIdea = (idea: SurpriseIdea) => {
    const text = `💡 ${idea.title}\n\n${idea.description}\n\n💰 ${idea.estimatedCost} | ⏰ ${idea.timeRequired}\n\nGenerated by Billboard Surprise Generator! 🎉`;
    
    if (navigator.share) {
      navigator.share({
        title: idea.title,
        text: text,
        url: window.location.href,
      });
    } else {
      navigator.clipboard.writeText(text);
      // Show toast notification
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-pink-900 to-red-900">
      <Navigation />
      
      <div className="pt-20 pb-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Hero Section */}
          <div className="text-center mb-12">
            <div className="flex justify-center mb-6">
              <div className="p-4 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full">
                <Sparkles className="w-12 h-12 text-white" />
              </div>
            </div>
            <h1 className="text-5xl font-bold bg-gradient-to-r from-pink-400 to-purple-400 bg-clip-text text-transparent mb-4">
              {t('surprises.title', 'Surprise Ideas Generator')}
            </h1>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              {t('surprises.subtitle', 'Create unforgettable moments with AI-powered surprise ideas tailored to your relationship, budget, and location.')}
            </p>
          </div>

          {/* Quick Surprises */}
          {quickSurprises.length > 0 && (
            <div className="mb-12">
              <h2 className="text-2xl font-bold text-white mb-6 flex items-center gap-2">
                <Lightbulb className="w-6 h-6" />
                {t('surprises.quickIdeas', 'Quick Ideas to Get Started')}
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {quickSurprises.map((idea, index) => (
                  <Card key={index} className="bg-white/10 backdrop-blur-sm border-white/20">
                    <CardHeader>
                      <CardTitle className="text-white text-lg">{idea.title}</CardTitle>
                      <div className="flex gap-2">
                        <Badge className={getDifficultyColor(idea.difficulty)}>
                          {idea.difficulty}
                        </Badge>
                        <Badge variant="outline" className="text-white border-white/30">
                          {idea.category}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-gray-300 text-sm mb-4">{idea.description}</p>
                      <div className="flex justify-between items-center text-xs text-gray-400">
                        <span className="flex items-center gap-1">
                          <DollarSign className="w-3 h-3" />
                          {idea.estimatedCost}
                        </span>
                        <span className="flex items-center gap-1">
                          <Clock className="w-3 h-3" />
                          {idea.timeRequired}
                        </span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}

          {/* Surprise Generator Form */}
          <Card className="bg-white/10 backdrop-blur-sm border-white/20 mb-12">
            <CardHeader>
              <CardTitle className="text-white text-2xl flex items-center gap-2">
                <Gift className="w-6 h-6" />
                {t('surprises.generator', 'Personalized Surprise Generator')}
              </CardTitle>
              <CardDescription className="text-gray-300">
                {t('surprises.generatorDescription', 'Tell us about the person and occasion, and we\'ll create perfect surprise ideas just for you.')}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {/* Occasion */}
                <div className="space-y-2">
                  <label className="text-white font-medium flex items-center gap-2">
                    <Calendar className="w-4 h-4" />
                    {t('surprises.occasion', 'Occasion')}
                  </label>
                  <Select value={formData.occasion} onValueChange={(value) => setFormData({...formData, occasion: value})}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white">
                      <SelectValue placeholder="Select occasion..." />
                    </SelectTrigger>
                    <SelectContent>
                      {OCCASIONS.map((occasion) => (
                        <SelectItem key={occasion.value} value={occasion.value}>
                          {occasion.icon} {occasion.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Relationship */}
                <div className="space-y-2">
                  <label className="text-white font-medium flex items-center gap-2">
                    <Users className="w-4 h-4" />
                    {t('surprises.relationship', 'Relationship')}
                  </label>
                  <Select value={formData.relationship} onValueChange={(value) => setFormData({...formData, relationship: value})}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white">
                      <SelectValue placeholder="Select relationship..." />
                    </SelectTrigger>
                    <SelectContent>
                      {RELATIONSHIPS.map((relationship) => (
                        <SelectItem key={relationship.value} value={relationship.value}>
                          {relationship.icon} {relationship.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Budget */}
                <div className="space-y-2">
                  <label className="text-white font-medium flex items-center gap-2">
                    <DollarSign className="w-4 h-4" />
                    {t('surprises.budget', 'Budget')}
                  </label>
                  <Select value={formData.budget} onValueChange={(value) => setFormData({...formData, budget: value})}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white">
                      <SelectValue placeholder="Select budget..." />
                    </SelectTrigger>
                    <SelectContent>
                      {BUDGETS.map((budget) => (
                        <SelectItem key={budget.value} value={budget.value}>
                          {budget.icon} {budget.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Location */}
                <div className="space-y-2">
                  <label className="text-white font-medium flex items-center gap-2">
                    <MapPin className="w-4 h-4" />
                    {t('surprises.location', 'Location (Optional)')}
                  </label>
                  <Input
                    placeholder="e.g., New York, London, Tokyo..."
                    value={formData.location}
                    onChange={(e) => setFormData({...formData, location: e.target.value})}
                    className="bg-white/10 border-white/20 text-white placeholder-gray-400"
                  />
                </div>

                {/* Personality Type */}
                <div className="space-y-2">
                  <label className="text-white font-medium flex items-center gap-2">
                    <Star className="w-4 h-4" />
                    {t('surprises.personality', 'Personality (Optional)')}
                  </label>
                  <Select value={formData.personalityType} onValueChange={(value) => setFormData({...formData, personalityType: value})}>
                    <SelectTrigger className="bg-white/10 border-white/20 text-white">
                      <SelectValue placeholder="Select personality..." />
                    </SelectTrigger>
                    <SelectContent>
                      {PERSONALITY_TYPES.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.icon} {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Interests */}
                <div className="space-y-2 md:col-span-2 lg:col-span-1">
                  <label className="text-white font-medium flex items-center gap-2">
                    <Heart className="w-4 h-4" />
                    {t('surprises.interests', 'Interests (Optional)')}
                  </label>
                  <Input
                    placeholder="e.g., music, cooking, travel..."
                    value={formData.interests}
                    onChange={(e) => setFormData({...formData, interests: e.target.value})}
                    className="bg-white/10 border-white/20 text-white placeholder-gray-400"
                  />
                </div>
              </div>

              <Button
                onClick={generateSurprises}
                disabled={!formData.occasion || !formData.relationship || !formData.budget || loading}
                className="w-full bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-semibold py-3 text-lg"
              >
                {loading ? (
                  <>
                    <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
                    {t('surprises.generating', 'Generating Ideas...')}
                  </>
                ) : (
                  <>
                    <Sparkles className="w-5 h-5 mr-2" />
                    {t('surprises.generate', 'Generate Surprise Ideas')}
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Generated Surprises */}
          {surprises && (
            <div className="space-y-8">
              <div className="text-center">
                <h2 className="text-3xl font-bold text-white mb-2">
                  {t('surprises.resultsTitle', 'Your Personalized Surprise Ideas')}
                </h2>
                <p className="text-gray-300">
                  {t('surprises.resultsSubtitle', 'Perfect for')} {surprises.occasion} • {surprises.location}
                </p>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {surprises.ideas.map((idea, index) => (
                  <Card key={index} className="bg-white/10 backdrop-blur-sm border-white/20">
                    <CardHeader>
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-white text-xl mb-2">{idea.title}</CardTitle>
                          <div className="flex gap-2 mb-3">
                            <Badge className={getDifficultyColor(idea.difficulty)}>
                              {idea.difficulty}
                            </Badge>
                            <Badge variant="outline" className="text-white border-white/30">
                              {idea.category}
                            </Badge>
                          </div>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => shareIdea(idea)}
                          className="text-white hover:bg-white/10"
                        >
                          <Share2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <p className="text-gray-300">{idea.description}</p>
                      
                      <div className="flex justify-between items-center text-sm">
                        <span className="flex items-center gap-1 text-green-400">
                          <DollarSign className="w-4 h-4" />
                          {idea.estimatedCost}
                        </span>
                        <span className="flex items-center gap-1 text-blue-400">
                          <Clock className="w-4 h-4" />
                          {idea.timeRequired}
                        </span>
                      </div>

                      {idea.materials && idea.materials.length > 0 && (
                        <div>
                          <h4 className="text-white font-medium mb-2">Materials Needed:</h4>
                          <div className="flex flex-wrap gap-1">
                            {idea.materials.map((material, i) => (
                              <Badge key={i} variant="secondary" className="text-xs">
                                {material}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}

                      {idea.steps && idea.steps.length > 0 && (
                        <div>
                          <h4 className="text-white font-medium mb-2">Steps:</h4>
                          <ol className="text-gray-300 text-sm space-y-1">
                            {idea.steps.map((step, i) => (
                              <li key={i} className="flex gap-2">
                                <span className="text-pink-400 font-medium">{i + 1}.</span>
                                {step}
                              </li>
                            ))}
                          </ol>
                        </div>
                      )}

                      {idea.tips && idea.tips.length > 0 && (
                        <div>
                          <h4 className="text-white font-medium mb-2">Pro Tips:</h4>
                          <ul className="text-gray-300 text-sm space-y-1">
                            {idea.tips.map((tip, i) => (
                              <li key={i} className="flex gap-2">
                                <span className="text-yellow-400">💡</span>
                                {tip}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>

              {/* Share Section */}
              <Card className="bg-gradient-to-r from-pink-500/20 to-purple-600/20 border-pink-500/30">
                <CardContent className="text-center py-8">
                  <h3 className="text-white text-xl font-bold mb-2">
                    {t('surprises.shareTitle', 'Love These Ideas?')}
                  </h3>
                  <p className="text-gray-300 mb-4">
                    {t('surprises.shareDescription', 'Share your favorite surprise ideas with friends and spread the joy!')}
                  </p>
                  <Button
                    onClick={() => {
                      const text = `${surprises.shareableText}\n\nCheck out Billboard's Surprise Generator: ${window.location.href}`;
                      if (navigator.share) {
                        navigator.share({ text, url: window.location.href });
                      } else {
                        navigator.clipboard.writeText(text);
                      }
                    }}
                    className="bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700"
                  >
                    <Share2 className="w-4 h-4 mr-2" />
                    {t('surprises.shareButton', 'Share These Ideas')}
                  </Button>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

