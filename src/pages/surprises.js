import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Navigation } from '@/components/navigation';
import { Heart, Gift, Calendar, MapPin, DollarSign, Clock, Lightbulb, Share2, Sparkles, Users, Star, RefreshCw } from 'lucide-react';
import { useTranslation } from 'react-i18next';
const OCCASIONS = [
    { value: 'birthday', label: 'Birthday', icon: '🎂' },
    { value: 'anniversary', label: 'Anniversary', icon: '💕' },
    { value: 'date_night', label: 'Date Night', icon: '🌹' },
    { value: 'apology', label: 'Apology', icon: '🙏' },
    { value: 'just_because', label: 'Just Because', icon: '✨' },
    { value: 'holiday', label: 'Holiday', icon: '🎄' },
];
const RELATIONSHIPS = [
    { value: 'partner', label: 'Romantic Partner', icon: '💑' },
    { value: 'friend', label: 'Friend', icon: '👫' },
    { value: 'family', label: 'Family Member', icon: '👨‍👩‍👧‍👦' },
    { value: 'colleague', label: 'Colleague', icon: '🤝' },
];
const BUDGETS = [
    { value: 'low', label: 'Budget-Friendly ($0-25)', icon: '💰' },
    { value: 'medium', label: 'Moderate ($25-100)', icon: '💳' },
    { value: 'high', label: 'Premium ($100-500)', icon: '💎' },
    { value: 'unlimited', label: 'Sky\'s the Limit', icon: '🚀' },
];
const PERSONALITY_TYPES = [
    { value: 'adventurous', label: 'Adventurous', icon: '🏔️' },
    { value: 'romantic', label: 'Romantic', icon: '💝' },
    { value: 'practical', label: 'Practical', icon: '🔧' },
    { value: 'creative', label: 'Creative', icon: '🎨' },
    { value: 'social', label: 'Social', icon: '🎉' },
];
export function SurprisesPage() {
    const { t } = useTranslation();
    const [formData, setFormData] = useState({
        occasion: '',
        relationship: '',
        budget: '',
        location: '',
        interests: '',
        personalityType: '',
    });
    const [surprises, setSurprises] = useState(null);
    const [loading, setLoading] = useState(false);
    const [quickSurprises, setQuickSurprises] = useState([]);
    // Load quick surprises on page load
    useEffect(() => {
        loadQuickSurprises();
    }, []);
    const loadQuickSurprises = async () => {
        try {
            const response = await fetch('/api/surprises/quick');
            if (response.ok) {
                const data = await response.json();
                setQuickSurprises(data.ideas || []);
            }
        }
        catch (error) {
            console.error('Failed to load quick surprises:', error);
        }
    };
    const generateSurprises = async () => {
        if (!formData.occasion || !formData.relationship || !formData.budget) {
            return;
        }
        setLoading(true);
        try {
            const requestData = {
                ...formData,
                interests: formData.interests ? formData.interests.split(',').map(i => i.trim()) : [],
            };
            const response = await fetch('/api/surprises/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestData),
            });
            if (response.ok) {
                const data = await response.json();
                setSurprises(data);
            }
        }
        catch (error) {
            console.error('Failed to generate surprises:', error);
        }
        finally {
            setLoading(false);
        }
    };
    const getDifficultyColor = (difficulty) => {
        switch (difficulty) {
            case 'easy': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
            case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
            case 'hard': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
            default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';
        }
    };
    const shareIdea = (idea) => {
        const text = `💡 ${idea.title}\n\n${idea.description}\n\n💰 ${idea.estimatedCost} | ⏰ ${idea.timeRequired}\n\nGenerated by Billboard Surprise Generator! 🎉`;
        if (navigator.share) {
            navigator.share({
                title: idea.title,
                text: text,
                url: window.location.href,
            });
        }
        else {
            navigator.clipboard.writeText(text);
            // Show toast notification
        }
    };
    return (_jsxs("div", { className: "min-h-screen bg-gradient-to-br from-purple-900 via-pink-900 to-red-900", children: [_jsx(Navigation, {}), _jsx("div", { className: "pt-20 pb-12", children: _jsxs("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [_jsxs("div", { className: "text-center mb-12", children: [_jsx("div", { className: "flex justify-center mb-6", children: _jsx("div", { className: "p-4 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full", children: _jsx(Sparkles, { className: "w-12 h-12 text-white" }) }) }), _jsx("h1", { className: "text-5xl font-bold bg-gradient-to-r from-pink-400 to-purple-400 bg-clip-text text-transparent mb-4", children: t('surprises.title', 'Surprise Ideas Generator') }), _jsx("p", { className: "text-xl text-gray-300 max-w-3xl mx-auto", children: t('surprises.subtitle', 'Create unforgettable moments with AI-powered surprise ideas tailored to your relationship, budget, and location.') })] }), quickSurprises.length > 0 && (_jsxs("div", { className: "mb-12", children: [_jsxs("h2", { className: "text-2xl font-bold text-white mb-6 flex items-center gap-2", children: [_jsx(Lightbulb, { className: "w-6 h-6" }), t('surprises.quickIdeas', 'Quick Ideas to Get Started')] }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: quickSurprises.map((idea, index) => (_jsxs(Card, { className: "bg-white/10 backdrop-blur-sm border-white/20", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white text-lg", children: idea.title }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Badge, { className: getDifficultyColor(idea.difficulty), children: idea.difficulty }), _jsx(Badge, { variant: "outline", className: "text-white border-white/30", children: idea.category })] })] }), _jsxs(CardContent, { children: [_jsx("p", { className: "text-gray-300 text-sm mb-4", children: idea.description }), _jsxs("div", { className: "flex justify-between items-center text-xs text-gray-400", children: [_jsxs("span", { className: "flex items-center gap-1", children: [_jsx(DollarSign, { className: "w-3 h-3" }), idea.estimatedCost] }), _jsxs("span", { className: "flex items-center gap-1", children: [_jsx(Clock, { className: "w-3 h-3" }), idea.timeRequired] })] })] })] }, index))) })] })), _jsxs(Card, { className: "bg-white/10 backdrop-blur-sm border-white/20 mb-12", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "text-white text-2xl flex items-center gap-2", children: [_jsx(Gift, { className: "w-6 h-6" }), t('surprises.generator', 'Personalized Surprise Generator')] }), _jsx(CardDescription, { className: "text-gray-300", children: t('surprises.generatorDescription', 'Tell us about the person and occasion, and we\'ll create perfect surprise ideas just for you.') })] }), _jsxs(CardContent, { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-2", children: [_jsxs("label", { className: "text-white font-medium flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4" }), t('surprises.occasion', 'Occasion')] }), _jsxs(Select, { value: formData.occasion, onValueChange: (value) => setFormData({ ...formData, occasion: value }), children: [_jsx(SelectTrigger, { className: "bg-white/10 border-white/20 text-white", children: _jsx(SelectValue, { placeholder: "Select occasion..." }) }), _jsx(SelectContent, { children: OCCASIONS.map((occasion) => (_jsxs(SelectItem, { value: occasion.value, children: [occasion.icon, " ", occasion.label] }, occasion.value))) })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("label", { className: "text-white font-medium flex items-center gap-2", children: [_jsx(Users, { className: "w-4 h-4" }), t('surprises.relationship', 'Relationship')] }), _jsxs(Select, { value: formData.relationship, onValueChange: (value) => setFormData({ ...formData, relationship: value }), children: [_jsx(SelectTrigger, { className: "bg-white/10 border-white/20 text-white", children: _jsx(SelectValue, { placeholder: "Select relationship..." }) }), _jsx(SelectContent, { children: RELATIONSHIPS.map((relationship) => (_jsxs(SelectItem, { value: relationship.value, children: [relationship.icon, " ", relationship.label] }, relationship.value))) })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("label", { className: "text-white font-medium flex items-center gap-2", children: [_jsx(DollarSign, { className: "w-4 h-4" }), t('surprises.budget', 'Budget')] }), _jsxs(Select, { value: formData.budget, onValueChange: (value) => setFormData({ ...formData, budget: value }), children: [_jsx(SelectTrigger, { className: "bg-white/10 border-white/20 text-white", children: _jsx(SelectValue, { placeholder: "Select budget..." }) }), _jsx(SelectContent, { children: BUDGETS.map((budget) => (_jsxs(SelectItem, { value: budget.value, children: [budget.icon, " ", budget.label] }, budget.value))) })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("label", { className: "text-white font-medium flex items-center gap-2", children: [_jsx(MapPin, { className: "w-4 h-4" }), t('surprises.location', 'Location (Optional)')] }), _jsx(Input, { placeholder: "e.g., New York, London, Tokyo...", value: formData.location, onChange: (e) => setFormData({ ...formData, location: e.target.value }), className: "bg-white/10 border-white/20 text-white placeholder-gray-400" })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("label", { className: "text-white font-medium flex items-center gap-2", children: [_jsx(Star, { className: "w-4 h-4" }), t('surprises.personality', 'Personality (Optional)')] }), _jsxs(Select, { value: formData.personalityType, onValueChange: (value) => setFormData({ ...formData, personalityType: value }), children: [_jsx(SelectTrigger, { className: "bg-white/10 border-white/20 text-white", children: _jsx(SelectValue, { placeholder: "Select personality..." }) }), _jsx(SelectContent, { children: PERSONALITY_TYPES.map((type) => (_jsxs(SelectItem, { value: type.value, children: [type.icon, " ", type.label] }, type.value))) })] })] }), _jsxs("div", { className: "space-y-2 md:col-span-2 lg:col-span-1", children: [_jsxs("label", { className: "text-white font-medium flex items-center gap-2", children: [_jsx(Heart, { className: "w-4 h-4" }), t('surprises.interests', 'Interests (Optional)')] }), _jsx(Input, { placeholder: "e.g., music, cooking, travel...", value: formData.interests, onChange: (e) => setFormData({ ...formData, interests: e.target.value }), className: "bg-white/10 border-white/20 text-white placeholder-gray-400" })] })] }), _jsx(Button, { onClick: generateSurprises, disabled: !formData.occasion || !formData.relationship || !formData.budget || loading, className: "w-full bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-semibold py-3 text-lg", children: loading ? (_jsxs(_Fragment, { children: [_jsx(RefreshCw, { className: "w-5 h-5 mr-2 animate-spin" }), t('surprises.generating', 'Generating Ideas...')] })) : (_jsxs(_Fragment, { children: [_jsx(Sparkles, { className: "w-5 h-5 mr-2" }), t('surprises.generate', 'Generate Surprise Ideas')] })) })] })] }), surprises && (_jsxs("div", { className: "space-y-8", children: [_jsxs("div", { className: "text-center", children: [_jsx("h2", { className: "text-3xl font-bold text-white mb-2", children: t('surprises.resultsTitle', 'Your Personalized Surprise Ideas') }), _jsxs("p", { className: "text-gray-300", children: [t('surprises.resultsSubtitle', 'Perfect for'), " ", surprises.occasion, " \u2022 ", surprises.location] })] }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-8", children: surprises.ideas.map((idea, index) => (_jsxs(Card, { className: "bg-white/10 backdrop-blur-sm border-white/20", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-start", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-white text-xl mb-2", children: idea.title }), _jsxs("div", { className: "flex gap-2 mb-3", children: [_jsx(Badge, { className: getDifficultyColor(idea.difficulty), children: idea.difficulty }), _jsx(Badge, { variant: "outline", className: "text-white border-white/30", children: idea.category })] })] }), _jsx(Button, { variant: "ghost", size: "sm", onClick: () => shareIdea(idea), className: "text-white hover:bg-white/10", children: _jsx(Share2, { className: "w-4 h-4" }) })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsx("p", { className: "text-gray-300", children: idea.description }), _jsxs("div", { className: "flex justify-between items-center text-sm", children: [_jsxs("span", { className: "flex items-center gap-1 text-green-400", children: [_jsx(DollarSign, { className: "w-4 h-4" }), idea.estimatedCost] }), _jsxs("span", { className: "flex items-center gap-1 text-blue-400", children: [_jsx(Clock, { className: "w-4 h-4" }), idea.timeRequired] })] }), idea.materials && idea.materials.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "text-white font-medium mb-2", children: "Materials Needed:" }), _jsx("div", { className: "flex flex-wrap gap-1", children: idea.materials.map((material, i) => (_jsx(Badge, { variant: "secondary", className: "text-xs", children: material }, i))) })] })), idea.steps && idea.steps.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "text-white font-medium mb-2", children: "Steps:" }), _jsx("ol", { className: "text-gray-300 text-sm space-y-1", children: idea.steps.map((step, i) => (_jsxs("li", { className: "flex gap-2", children: [_jsxs("span", { className: "text-pink-400 font-medium", children: [i + 1, "."] }), step] }, i))) })] })), idea.tips && idea.tips.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "text-white font-medium mb-2", children: "Pro Tips:" }), _jsx("ul", { className: "text-gray-300 text-sm space-y-1", children: idea.tips.map((tip, i) => (_jsxs("li", { className: "flex gap-2", children: [_jsx("span", { className: "text-yellow-400", children: "\uD83D\uDCA1" }), tip] }, i))) })] }))] })] }, index))) }), _jsx(Card, { className: "bg-gradient-to-r from-pink-500/20 to-purple-600/20 border-pink-500/30", children: _jsxs(CardContent, { className: "text-center py-8", children: [_jsx("h3", { className: "text-white text-xl font-bold mb-2", children: t('surprises.shareTitle', 'Love These Ideas?') }), _jsx("p", { className: "text-gray-300 mb-4", children: t('surprises.shareDescription', 'Share your favorite surprise ideas with friends and spread the joy!') }), _jsxs(Button, { onClick: () => {
                                                    const text = `${surprises.shareableText}\n\nCheck out Billboard's Surprise Generator: ${window.location.href}`;
                                                    if (navigator.share) {
                                                        navigator.share({ text, url: window.location.href });
                                                    }
                                                    else {
                                                        navigator.clipboard.writeText(text);
                                                    }
                                                }, className: "bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700", children: [_jsx(Share2, { className: "w-4 h-4 mr-2" }), t('surprises.shareButton', 'Share These Ideas')] })] }) })] }))] }) })] }));
}
